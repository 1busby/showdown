# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Contestant {
  _id: ID!
  name: String
  seed: Int
  points: Int
  isRegistered: Boolean
}

input ContestantInput {
  _id: ID
  name: String
  seed: Int
  points: Int
  isRegistered: Boolean
}

"""Date custom scalar type"""
scalar Date

"""An object with to inform app of access status"""
type EditAccessRequest {
  canEdit: Boolean
}

"""The match model"""
type Match {
  _id: ID!
  matchNumber: Int
  roundNumber: Int
  winnerSeed: String
  createdOn: Date
  updatedOn: Date
  highSeedNumber: Int
  lowSeedNumber: Int
  matches: [Match]
  sets: [Set]
}

input MatchInput {
  _id: ID
  matchNumber: Int
  roundNumber: Int
  highSeedNumber: Int
  lowSeedNumber: Int
  winnerSeed: String
  sets: [SetInput]
}

type Mutation {
  addTournament(newTournamentData: NewTournamentInput!): Tournament!
  updateTournament(updateTournamentData: UpdateTournamentInput!): Tournament!
  runTournament(_id: ID!): Tournament!
  joinTournament(userId: ID, contestantName: String, id: ID!): Tournament!
  removeContestant(contestantId: ID!, _id: ID!): Tournament!
  removeTournament(id: String!): Boolean!
  signin(signinInput: SigninInput!): User!
  registerUser(newUserInput: NewUserInput!): User!
}

input NewTournamentInput {
  name: String!
  description: String
  contestantCount: Int
  createdBy: ID
  contestants: [ContestantInput]
  matches: [MatchInput]
  editAccessCode: String
  setCount: Int
  allowRegistration: Boolean
  allowSelfScoring: Boolean
  structure: String
}

input NewUserInput {
  username: String!
  email: String
  firstName: String
  lastName: String
}

type Query {
  tournament(linkCode: String, id: String): Tournament!
  tournaments(skip: Int = 0, take: Int = 25): [Tournament!]!
  requestEditAccess(requestEditAccessInput: RequestEditAccessInput!): EditAccessRequest!
  user(id: String!): User!
  users(skip: Int = 0, take: Int = 25): [User!]!
}

input RequestEditAccessInput {
  tournamentId: String
  editAccessCode: String
}

"""A set for a match"""
type Set {
  _id: ID!
  orderNumber: Int
  highSeedScore: Int
  lowSeedScore: Int
  outcome: String
  startedOn: Date
  completedOn: Date
  notes: String
}

input SetInput {
  _id: ID
  orderNumber: Int
  highSeedScore: Int
  lowSeedScore: Int
  outcome: String
  notes: String
}

input SigninInput {
  username: String!
}

type Subscription {
  tournamentAdded: Tournament!
}

type Team {
  _id: ID!
  name: String!
  createdOn: Date!
  updatedOn: Date!
  users: User
  seed: Float!
}

"""The tournament model"""
type Tournament {
  _id: ID!
  name: String
  description: String
  contestantCount: Int
  createdBy: User
  contestants: [Contestant]
  teams: [Team]
  matches: [Match]
  updates: [Update]
  createdOn: Date
  updatedOn: Date
  linkCode: String
  editAccessCode: String
  setCount: Int
  hasStarted: Boolean
  allowRegistration: Boolean
  allowSelfScoring: Boolean
  structure: String
}

"""The update model"""
type Update {
  _id: ID!
  title: String
  description: String
  createdOn: Date
}

input UpdateInput {
  title: String
  description: String
  recipientIds: [ID]
  createdOn: Int
}

input UpdateTournamentInput {
  _id: ID!
  name: String
  description: String
  contestantCount: Int
  contestants: [ContestantInput]
  matches: [MatchInput]
  updates: [UpdateInput]
  editAccessCode: String
  updatedBy: ID
  setCount: Int
  hasStarted: Boolean
  allowRegistration: Boolean
  allowSelfScoring: Boolean
  structure: String
}

"""The user model"""
type User implements Contestant {
  _id: ID!
  name: String
  seed: Int
  points: Int
  isRegistered: Boolean
  dId: ID!
  username: String
  email: String
  firstName: String
  lastName: String
  teams: [Team]
  createdOn: Date
  updatedOn: Date
}
